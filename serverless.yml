service: restore-rds-target

frameworkVersion: '2'

# Attaching handlers
functions:
  restoreSnapshotInstance:
    handler: src/rds-instance-handler.handler
    events:
      - schedule: cron(10 05 * * ? *)
  modifyRestoredInstance:
    handler: src/rds-instance-handler.modifyHandler
    events:
      - eventBridge:
          pattern:
            source:
              - aws.rds
            detail-type:
              - RDS DB Instance Event

# Default serverless stuff
provider:
  name: aws
  runtime: nodejs14.x
  timeout: 900
  stage: ${opt:stage, 'production'}
  targetStage: ${opt:target-stage, 'staging'}
  region: ${opt:region, 'eu-central-1'}
  lambdaHashingVersion: 20201221
  deploymentBucket:
    name: 2solar-lambda-deploys
    maxPreviousDeploymentArtifacts: 2
  deploymentPrefix: "${opt:stage}-2solar-rds-restore-to-target"
  environment:
    RESTORE_FROM_INSTANCE_ID: ${opt:db-restore-instance}
    TARGET_INSTANCE_ID: ${opt:db-target-instance}
    TARGET_DB_INSTANCE_CLASS: ${opt:db-instance-class, 'db.t2.micro'}
    TARGET_DB_SUBNET_GROUP_NAME:  ${opt:db-subnet-group-name}
    TARGET_DB_SECURITY_GROUPS:  ${opt:db-security-groups}
    SSM_PATH: /${self:provider.targetStage}-db/
    CREATE_LATEST_SNAPSHOT: false
    SEND_SNS_NOTIFICATION_TOPIC_ARN: arn:aws:sns:eu-central-1:596127487546:development-alerts-alarm
    REGION: eu-central-1

    DB_HOST: ${ssm:/${self:provider.targetStage}-db/host}
    DB_DATABASE: ${ssm:/${self:provider.stage}-db/portal-name}
    DB_USER: ${ssm:/${self:provider.stage}-db/portal-username~true}
    DB_PASSWORD: ${ssm:/${self:provider.stage}-db/portal-password~true}

  iam:
    role:
      statements:
        - Effect: Allow
          Action: [ sts:AssumeRole ]
          Resource: "*"
        - Effect: Allow
          Action: [ rds:* ]
          Resource:
            - arn:aws:rds:eu-central-1:596127487546:db:${opt:db-target-instance}
        - Effect: Allow
          Action: [ rds:CreateDBSnapshot, rds:ModifyDBInstance, rds:RestoreDBInstanceFromDBSnapshot, rds:Describe* ]
          Resource:  "*"
        - Effect: Allow
          Action: [ lambda:InvokeFunction, lambda:RemovePermission ]
          Resource: "*"
        - Effect: Allow
          Action: [ ssm:GetParametersByPath ]
          Resource: "*"
        - Effect: Allow
          Action: [ sns:Publish ]
          Resource:
            - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.sendNotificationsTopicName}"

plugins:
  - serverless-offline
  - serverless-webpack

package:
  patterns:
    - node_modules/aws-sdk/**

custom:
  sendNotificationsTopicName: development-alerts-alarm
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: yarn